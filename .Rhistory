name = 'Women',
text = ~paste(-women_bins),
hoverinfo = 'text',
marker = list(color = 'seagreen')
) %>%
layout(
yaxis = list(title = 'Age'),
xaxis = list(
range = c(-1200, 1200),
tickvals = c(-1000, -700, -300, 0, 300, 700, 1000),
ticktext = c(1000, 700, 300, 0, 300, 700, 1000),
title = 'Number'
),
barmode = 'overlay',
bargap = 0.1
) %>%
config(displayModeBar = FALSE)
# Load necessary library
library(plotly)
# Define data
women_bins <- c(-600, -623, -653, -650, -670, -578, -541, -411, -322, -230)
men_bins <- c(600, 623, 653, 650, 670, 578, 541, 360, 312, 170)
y <- seq(0, 90, 10)
# Create the population pyramid chart
plot_ly() %>%
add_trace(
y = ~y,
x = ~abs(men_bins),  # Use absolute values for men's bins
type = 'bar',
orientation = 'h',
name = 'Men',
hoverinfo = 'x',
marker = list(color = 'red')
) %>%
add_trace(
y = ~y,
x = ~(-abs(women_bins)),  # Use negative absolute values for women's bins
type = 'bar',
orientation = 'h',
name = 'Women',
text = ~paste(women_bins),  # Use positive values for text
hoverinfo = 'text',
marker = list(color = 'seagreen')
) %>%
layout(
yaxis = list(title = 'Age'),
xaxis = list(
range = c(0, 1200),  # Adjusted range
tickvals = c(0, 300, 700, 1000),
ticktext = c(0, 300, 700, 1000),
title = 'Number'
),
barmode = 'overlay',
bargap = 0.1
) %>%
config(displayModeBar = FALSE)
# Load necessary library
library(ggplot2)
# Define data
women_bins <- c(-600, -623, -653, -650, -670, -578, -541, -411, -322, -230)
men_bins <- c(600, 623, 653, 650, 670, 578, 541, 360, 312, 170)
y <- seq(0, 90, 10)
# Combine data into a single data frame
data <- data.frame(
Age = rep(y, 2),
Value = c(men_bins, women_bins),
Gender = rep(c("Men", "Women"), each = length(y))
)
# Create the population pyramid chart
ggplot(data, aes(x = Value, y = Age, fill = Gender)) +
geom_bar(stat = "identity", position = "identity") +
scale_fill_manual(values = c("blue", "pink")) +
labs(title = "Population Pyramid Chart", x = "Number", y = "Age") +
theme_minimal() +
theme(legend.position = "none")
# Load necessary library
library(ggplot2)
# Define data
women_bins <- c(-600, -623, -653, -650, -670, -578, -541, -411, -322, -230)
men_bins <- c(600, 623, 653, 650, 670, 578, 541, 360, 312, 170)
age <- seq(0, 90, 10)
# Create a data frame
df <- data.frame(Age = age, Women = women_bins, Men = men_bins)
# Melt the data for easier plotting
library(reshape2)
install.packages("reshape2")
# Load necessary library
library(ggplot2)
# Define data
women_bins <- c(-600, -623, -653, -650, -670, -578, -541, -411, -322, -230)
men_bins <- c(600, 623, 653, 650, 670, 578, 541, 360, 312, 170)
age <- seq(0, 90, 10)
# Create a data frame
df <- data.frame(Age = age, Women = women_bins, Men = men_bins)
# Melt the data for easier plotting
library(reshape2)
dfm <- melt(df, id.vars = "Age")
# Create the population pyramid chart
ggplot(dfm, aes(x = Age, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "identity", width = 5) +
scale_x_continuous(expand = c(0, 0), position = "top") +
scale_y_continuous(breaks = seq(-700, 700, 100), labels = abs(seq(-700, 700, 100))) +
coord_flip() +
theme_minimal() +
labs(x = "Number", y = "Age", fill = "Gender") +
theme(legend.position = "top", legend.title = element_blank())
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
cls
clear
shiny::runApp()
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
install.packages("plotly")
install.packages("shinydashboard")
install.packages("shinydashboard")
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("openxlsx")
runApp()
devtools::install_github("smartinsightsfromdata/rpivotTable")
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
# Install rpivotTable from GitHub
remotes::install_github("smartinsightsfromdata/rpivotTable")
shiny::runApp()
install.packages("shinyWidgets")
runApp()
runApp()
remotes::install_github("Appsilon/shiny.react")
remotes::install_github("Appsilon/shiny.fluent")
runApp()
runApp('fluent-app')
runApp('fluent-app/src')
runApp()
clear
cls()
runApp()
runApp()
install.packages("shiny")
install.packages("shiny")
install.packages("shiny.fluent")
library(shiny)
library(shiny.fluent)
library(shiny)
library(shiny.fluent)
ui <- fluentPage(
Text(variant = "xxLarge", "Hello world!")
)
server <- function(input, output, session) {}
shinyApp(ui, server)
library(shiny)
library(shiny.fluent)
navigation_styles <- list(
root = list(
height = "100%",
boxSizing = "border-box",
border = "1px solid #eee",
overflowY = "auto"
)
)
link_groups <- list(
list(
links = list(
list(
name = "Home",
expandAriaLabel = "Expand Home section",
collapseAriaLabel = "Collapse Home section",
links = list(
list(
name = "Activity",
url = "http://msn.com",
key = "key1",
target = "_blank"
),
list(
name = "MSN",
url = "http://msn.com",
disabled = TRUE,
key = "key2",
target = "_blank"
)
),
isExpanded = TRUE
),
list(
name = "Documents",
url = "http://example.com",
key = "key3",
isExpanded = TRUE
),
list(
name = "Pages",
url = "http://msn.com",
key = "key4"
),
list(
name = "Notebook",
url = "http://msn.com",
key = "key5",
disabled = TRUE
),
list(
name = "Communication and Media",
url = "http://msn.com",
key = "key6"
),
list(
name = "News",
url = "http://cnn.com",
icon = "News",
key = "key7",
target = "_blank",
iconProps = list(
iconName = "News",
styles = list(
root = list(
fontSize = 20,
color = "#106ebe"
)
)
)
)
)
)
)
ui <- function(id) {
ns <- NS(id)
Nav(
groups = link_groups,
selectedKey = "key1",
styles = navigation_styles
)
}
server <- function(id) {
moduleServer(id, function(input, output, session) {})
}
if (interactive()) {
shinyApp(ui("app"), function(input, output) server("app"))
}
ui <- function(id) {
ns <- NS(id)
Nav(
groups = link_groups,
selectedKey = "key1",
styles = navigation_styles
)
}
library(shiny)
library(shiny.fluent)
navigation_styles <- list(
root = list(
height = "100%",
boxSizing = "border-box",
border = "1px solid #eee",
overflowY = "auto"
)
)
link_groups <- list(
list(
links = list(
list(
name = "Documents",
url = "http://example.com",
key = "key3",
isExpanded = TRUE
),
)
)
)
link_groups <- list(
list(
name = "Documents",
url = "http://example.com",
key = "key3",
isExpanded = TRUE
),
)
library(shiny)
library(shiny.fluent)
navigation_styles <- list(
root = list(
height = "100%",
boxSizing = "border-box",
border = "1px solid #eee",
overflowY = "auto"
)
)
link_groups <- list(
list(
name = "Documents",
url = "http://example.com",
key = "key3",
isExpanded = TRUE
)
)
ui <- function(id) {
ns <- NS(id)
Nav(
groups = link_groups,
selectedKey = "key1",
styles = navigation_styles
)
}
server <- function(id) {
moduleServer(id, function(input, output, session) {})
}
if (interactive()) {
shinyApp(ui("app"), function(input, output) server("app"))
}
list(
name = "Pages",
url = "http://msn.com",
key = "key4"
),
library(shiny)
library(shiny.fluent)
navigation_styles <- list(
root = list(
height = "100%",
boxSizing = "border-box",
border = "1px solid #eee",
overflowY = "auto"
)
)
link_groups <- list(
list(
links = list(
list(
name = "Home",
expandAriaLabel = "Expand Home section",
collapseAriaLabel = "Collapse Home section",
links = list(
list(
name = "Activity",
url = "http://msn.com",
key = "key1",
target = "_blank"
),
list(
name = "MSN",
url = "http://msn.com",
disabled = TRUE,
key = "key2",
target = "_blank"
)
),
isExpanded = TRUE
),
list(
name = "Documents",
url = "http://example.com",
key = "key3",
isExpanded = TRUE
),
list(
name = "Pages",
url = "http://msn.com",
key = "key4"
),
list(
name = "Notebook",
url = "http://msn.com",
key = "key5",
disabled = TRUE
),
list(
name = "Communication and Media",
url = "http://msn.com",
key = "key6"
),
)
)
)
library(shiny)
library(shiny.fluent)
navigation_styles <- list(
root = list(
height = "100%",
boxSizing = "border-box",
border = "1px solid #eee",
overflowY = "auto"
)
)
link_groups <- list(
list(
links = list(
list(
name = "Home",
expandAriaLabel = "Expand Home section",
collapseAriaLabel = "Collapse Home section",
links = list(
list(
name = "Activity",
url = "http://msn.com",
key = "key1",
target = "_blank"
),
list(
name = "MSN",
url = "http://msn.com",
disabled = TRUE,
key = "key2",
target = "_blank"
)
),
isExpanded = TRUE
),
list(
name = "Documents",
url = "http://example.com",
key = "key3",
isExpanded = TRUE
),
list(
name = "Pages",
url = "http://msn.com",
key = "key4"
),
list(
name = "Notebook",
url = "http://msn.com",
key = "key5",
disabled = TRUE
),
list(
name = "Communication and Media",
url = "http://msn.com",
key = "key6"
),
list(
name = "News",
url = "http://cnn.com",
icon = "News",
key = "key7",
target = "_blank",
iconProps = list(
iconName = "News",
styles = list(
root = list(
fontSize = 20,
color = "#106ebe"
)
)
)
)
)
)
)
ui <- function(id) {
ns <- NS(id)
Nav(
groups = link_groups,
selectedKey = "key1",
styles = navigation_styles
)
}
server <- function(id) {
moduleServer(id, function(input, output, session) {})
}
if (interactive()) {
shinyApp(ui("app"), function(input, output) server("app"))
}
library(dplyr)
library(ggplot2)
library(glue)
library(leaflet)
library(plotly)
library(sass)
library(shiny)
library(shiny.fluent)
library(shiny.router)
makePage
shinyApp(ui, server)
library(dplyr)
library(ggplot2)
library(glue)
library(leaflet)
library(plotly)
library(sass)
library(shiny)
library(shiny.fluent)
library(shiny.router)
ui <- fluentPage(
uiOutput("analysis")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
runApp('app-fluent.R')
runApp('app-fluent.R')
runApp('app-fluent.R')
runApp('app-fluent.R')
runApp('app-fluent.R')
runApp('app-fluent.R')
runApp('app-fluent.R')
install.packages("shiny.fluent")
install.packages("shiny.fluent")
shiny::runApp()
runApp()
runApp()
runApp('fluent-app/src')
runApp('fluent-app/src')
runApp('fluent-app')
runApp('fluent-app')
